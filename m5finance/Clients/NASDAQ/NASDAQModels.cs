// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace M5Finance
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System;
    using System.Globalization;

    internal partial class NasdaqSecurities
    {
        [JsonProperty("data")]
        public Data Data { get; set; }

        [JsonProperty("message")]
        public object Message { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }
    }

    public class NasdaqSecuritiesExchange : Headers
    {
        public NasdaqSecuritiesExchange(Headers headers, string exchangeMic, string exchangeAcronym)
        {
            Symbol = headers.Symbol;
            Name = headers.Name;
            Lastsale = headers.Lastsale;
            Netchange = headers.Netchange;
            Pctchange = headers.Pctchange;
            MarketCap = headers.MarketCap;
            Country = headers.Country;
            Ipoyear = headers.Ipoyear;
            Volume = headers.Volume;
            Sector = headers.Sector;
            Industry = headers.Industry;
            Url = headers.Url;
            ExchangeMic = exchangeMic;
            ExchangeAcronym = exchangeAcronym;
        }

        public string ExchangeMic { get; set; }

        public string ExchangeAcronym { get; set; }
    }

    internal partial class Data
    {
        [JsonProperty("headers")]
        public Headers Headers { get; set; }

        [JsonProperty("rows")]
        public Headers[] Rows { get; set; }
    }

    public partial class Headers
    {
        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("lastsale")]
        public string Lastsale { get; set; }

        [JsonProperty("netchange")]
        public string Netchange { get; set; }

        [JsonProperty("pctchange")]
        public string Pctchange { get; set; }

        [JsonProperty("marketCap")]
        public string MarketCap { get; set; }

        [JsonProperty("country")]
        public Country Country { get; set; }

        [JsonProperty("ipoyear")]
        public IPOYearUnion Ipoyear { get; set; }

        [JsonProperty("volume")]
        public string Volume { get; set; }

        [JsonProperty("sector")]
        public Sector Sector { get; set; }

        [JsonProperty("industry")]
        public string Industry { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("rCode")]
        public long RCode { get; set; }

        [JsonProperty("bCodeMessage")]
        public object BCodeMessage { get; set; }

        [JsonProperty("developerMessage")]
        public object DeveloperMessage { get; set; }
    }

    public enum Country { Argentina, Australia, Bahamas, Belgium, Bermuda, Brazil, Canada, CaymanIslands, Chile, China, Colombia, CostaRica, Country, Curacao, Cyprus, Denmark, Empty, Finland, France, Germany, Greece, Guernsey, HongKong, India, Indonesia, Ireland, IsleOfMan, Israel, Italy, Japan, Jersey, Jordan, Kazakhstan, Luxembourg, Macau, Malaysia, Malta, Mexico, Monaco, Netherlands, NewZealand, Norway, Panama, Peru, Philippines, Portugal, PuertoRico, Russia, Singapore, SouthAfrica, SouthKorea, Spain, Sweden, Switzerland, Taiwan, Thailand, Turkey, UnitedArabEmirates, UnitedKingdom, UnitedStates, Uruguay };

    public enum IPOYearEnum { Empty, IpoYear };

    public enum Sector { BasicIndustries, CapitalGoods, ConsumerDurables, ConsumerNonDurables, ConsumerServices, Empty, Energy, Finance, HealthCare, Miscellaneous, PublicUtilities, Sector, Technology, Transportation };

    public partial struct IPOYearUnion
    {
        public IPOYearEnum? Enum;
        public long? Integer;

        public static implicit operator IPOYearUnion(IPOYearEnum Enum) => new IPOYearUnion { Enum = Enum };
        public static implicit operator IPOYearUnion(long Integer) => new IPOYearUnion { Integer = Integer };
    }

    internal partial class NasdaqSecurities
    {
        public static NasdaqSecurities FromJson(string json) => JsonConvert.DeserializeObject<NasdaqSecurities>(json, M5Finance.Converter.Settings);
    }

    internal static class Serialize
    {
        public static string ToJson(this NasdaqSecurities self) => JsonConvert.SerializeObject(self, M5Finance.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CountryConverter.Singleton,
                IpoyearUnionConverter.Singleton,
                IpoyearEnumConverter.Singleton,
                SectorConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CountryConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Country) || t == typeof(Country?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Country.Empty;
                case "Argentina":
                    return Country.Argentina;
                case "Australia":
                    return Country.Australia;
                case "Bahamas":
                    return Country.Bahamas;
                case "Belgium":
                    return Country.Belgium;
                case "Bermuda":
                    return Country.Bermuda;
                case "Brazil":
                    return Country.Brazil;
                case "Canada":
                    return Country.Canada;
                case "Cayman Islands":
                    return Country.CaymanIslands;
                case "Chile":
                    return Country.Chile;
                case "China":
                    return Country.China;
                case "Colombia":
                    return Country.Colombia;
                case "Costa Rica":
                    return Country.CostaRica;
                case "Country":
                    return Country.Country;
                case "Curacao":
                    return Country.Curacao;
                case "Cyprus":
                    return Country.Cyprus;
                case "Denmark":
                    return Country.Denmark;
                case "Finland":
                    return Country.Finland;
                case "France":
                    return Country.France;
                case "Germany":
                    return Country.Germany;
                case "Greece":
                    return Country.Greece;
                case "Guernsey":
                    return Country.Guernsey;
                case "Hong Kong":
                    return Country.HongKong;
                case "India":
                    return Country.India;
                case "Indonesia":
                    return Country.Indonesia;
                case "Ireland":
                    return Country.Ireland;
                case "Isle of Man":
                    return Country.IsleOfMan;
                case "Israel":
                    return Country.Israel;
                case "Italy":
                    return Country.Italy;
                case "Japan":
                    return Country.Japan;
                case "Jersey":
                    return Country.Jersey;
                case "Jordan":
                    return Country.Jordan;
                case "Kazakhstan":
                    return Country.Kazakhstan;
                case "Luxembourg":
                    return Country.Luxembourg;
                case "Macau":
                    return Country.Macau;
                case "Malaysia":
                    return Country.Malaysia;
                case "Malta":
                    return Country.Malta;
                case "Mexico":
                    return Country.Mexico;
                case "Monaco":
                    return Country.Monaco;
                case "Netherlands":
                    return Country.Netherlands;
                case "New Zealand":
                    return Country.NewZealand;
                case "Norway":
                    return Country.Norway;
                case "Panama":
                    return Country.Panama;
                case "Peru":
                    return Country.Peru;
                case "Philippines":
                    return Country.Philippines;
                case "Portugal":
                    return Country.Portugal;
                case "Puerto Rico":
                    return Country.PuertoRico;
                case "Russia":
                    return Country.Russia;
                case "Singapore":
                    return Country.Singapore;
                case "South Africa":
                    return Country.SouthAfrica;
                case "South Korea":
                    return Country.SouthKorea;
                case "Spain":
                    return Country.Spain;
                case "Sweden":
                    return Country.Sweden;
                case "Switzerland":
                    return Country.Switzerland;
                case "Taiwan":
                    return Country.Taiwan;
                case "Thailand":
                    return Country.Thailand;
                case "Turkey":
                    return Country.Turkey;
                case "United Arab Emirates":
                    return Country.UnitedArabEmirates;
                case "United Kingdom":
                    return Country.UnitedKingdom;
                case "United States":
                    return Country.UnitedStates;
                case "Uruguay":
                    return Country.Uruguay;
            }
            throw new Exception($"Cannot unmarshal type Country { value }");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Country)untypedValue;
            switch (value)
            {
                case Country.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Country.Argentina:
                    serializer.Serialize(writer, "Argentina");
                    return;
                case Country.Australia:
                    serializer.Serialize(writer, "Australia");
                    return;
                case Country.Bahamas:
                    serializer.Serialize(writer, "Bahamas");
                    return;
                case Country.Belgium:
                    serializer.Serialize(writer, "Belgium");
                    return;
                case Country.Bermuda:
                    serializer.Serialize(writer, "Bermuda");
                    return;
                case Country.Brazil:
                    serializer.Serialize(writer, "Brazil");
                    return;
                case Country.Canada:
                    serializer.Serialize(writer, "Canada");
                    return;
                case Country.CaymanIslands:
                    serializer.Serialize(writer, "Cayman Islands");
                    return;
                case Country.Chile:
                    serializer.Serialize(writer, "Chile");
                    return;
                case Country.China:
                    serializer.Serialize(writer, "China");
                    return;
                case Country.Colombia:
                    serializer.Serialize(writer, "Colombia");
                    return;
                case Country.CostaRica:
                    serializer.Serialize(writer, "Costa Rica");
                    return;
                case Country.Country:
                    serializer.Serialize(writer, "Country");
                    return;
                case Country.Curacao:
                    serializer.Serialize(writer, "Curacao");
                    return;
                case Country.Cyprus:
                    serializer.Serialize(writer, "Cyprus");
                    return;
                case Country.Denmark:
                    serializer.Serialize(writer, "Denmark");
                    return;
                case Country.Finland:
                    serializer.Serialize(writer, "Finland");
                    return;
                case Country.France:
                    serializer.Serialize(writer, "France");
                    return;
                case Country.Germany:
                    serializer.Serialize(writer, "Germany");
                    return;
                case Country.Greece:
                    serializer.Serialize(writer, "Greece");
                    return;
                case Country.Guernsey:
                    serializer.Serialize(writer, "Guernsey");
                    return;
                case Country.HongKong:
                    serializer.Serialize(writer, "Hong Kong");
                    return;
                case Country.India:
                    serializer.Serialize(writer, "India");
                    return;
                case Country.Indonesia:
                    serializer.Serialize(writer, "Indonesia");
                    return;
                case Country.Ireland:
                    serializer.Serialize(writer, "Ireland");
                    return;
                case Country.IsleOfMan:
                    serializer.Serialize(writer, "Isle of Man");
                    return;
                case Country.Israel:
                    serializer.Serialize(writer, "Israel");
                    return;
                case Country.Italy:
                    serializer.Serialize(writer, "Italy");
                    return;
                case Country.Japan:
                    serializer.Serialize(writer, "Japan");
                    return;
                case Country.Jersey:
                    serializer.Serialize(writer, "Jersey");
                    return;
                case Country.Jordan:
                    serializer.Serialize(writer, "Jordan");
                    return;
                case Country.Kazakhstan:
                    serializer.Serialize(writer, "Kazakhstan");
                    return;
                case Country.Luxembourg:
                    serializer.Serialize(writer, "Luxembourg");
                    return;
                case Country.Macau:
                    serializer.Serialize(writer, "Macau");
                    return;
                case Country.Malta:
                    serializer.Serialize(writer, "Malta");
                    return;
                case Country.Mexico:
                    serializer.Serialize(writer, "Mexico");
                    return;
                case Country.Monaco:
                    serializer.Serialize(writer, "Monaco");
                    return;
                case Country.Netherlands:
                    serializer.Serialize(writer, "Netherlands");
                    return;
                case Country.NewZealand:
                    serializer.Serialize(writer, "New Zealand");
                    return;
                case Country.Norway:
                    serializer.Serialize(writer, "Norway");
                    return;
                case Country.Panama:
                    serializer.Serialize(writer, "Panama");
                    return;
                case Country.Peru:
                    serializer.Serialize(writer, "Peru");
                    return;
                case Country.Philippines:
                    serializer.Serialize(writer, "Philippines");
                    return;
                case Country.Portugal:
                    serializer.Serialize(writer, "Portugal");
                    return;
                case Country.PuertoRico:
                    serializer.Serialize(writer, "Puerto Rico");
                    return;
                case Country.Russia:
                    serializer.Serialize(writer, "Russia");
                    return;
                case Country.Singapore:
                    serializer.Serialize(writer, "Singapore");
                    return;
                case Country.SouthAfrica:
                    serializer.Serialize(writer, "South Africa");
                    return;
                case Country.SouthKorea:
                    serializer.Serialize(writer, "South Korea");
                    return;
                case Country.Spain:
                    serializer.Serialize(writer, "Spain");
                    return;
                case Country.Sweden:
                    serializer.Serialize(writer, "Sweden");
                    return;
                case Country.Switzerland:
                    serializer.Serialize(writer, "Switzerland");
                    return;
                case Country.Taiwan:
                    serializer.Serialize(writer, "Taiwan");
                    return;
                case Country.Turkey:
                    serializer.Serialize(writer, "Turkey");
                    return;
                case Country.UnitedArabEmirates:
                    serializer.Serialize(writer, "United Arab Emirates");
                    return;
                case Country.UnitedKingdom:
                    serializer.Serialize(writer, "United Kingdom");
                    return;
                case Country.UnitedStates:
                    serializer.Serialize(writer, "United States");
                    return;
            }
            throw new Exception("Cannot marshal type Country");
        }

        public static readonly CountryConverter Singleton = new CountryConverter();
    }

    internal class IpoyearUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IPOYearUnion) || t == typeof(IPOYearUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    switch (stringValue)
                    {
                        case "":
                            return new IPOYearUnion { Enum = IPOYearEnum.Empty };
                        case "IPO Year":
                            return new IPOYearUnion { Enum = IPOYearEnum.IpoYear };
                    }
                    long l;
                    if (Int64.TryParse(stringValue, out l))
                    {
                        return new IPOYearUnion { Integer = l };
                    }
                    break;
            }
            throw new Exception("Cannot unmarshal type IpoyearUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (IPOYearUnion)untypedValue;
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case IPOYearEnum.Empty:
                        serializer.Serialize(writer, "");
                        return;
                    case IPOYearEnum.IpoYear:
                        serializer.Serialize(writer, "IPO Year");
                        return;
                }
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value.ToString());
                return;
            }
            throw new Exception("Cannot marshal type IpoyearUnion");
        }

        public static readonly IpoyearUnionConverter Singleton = new IpoyearUnionConverter();
    }

    internal class IpoyearEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IPOYearEnum) || t == typeof(IPOYearEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return IPOYearEnum.Empty;
                case "IPO Year":
                    return IPOYearEnum.IpoYear;
            }
            throw new Exception("Cannot unmarshal type IpoyearEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (IPOYearEnum)untypedValue;
            switch (value)
            {
                case IPOYearEnum.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case IPOYearEnum.IpoYear:
                    serializer.Serialize(writer, "IPO Year");
                    return;
            }
            throw new Exception("Cannot marshal type IpoyearEnum");
        }

        public static readonly IpoyearEnumConverter Singleton = new IpoyearEnumConverter();
    }

    internal class SectorConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Sector) || t == typeof(Sector?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Sector.Empty;
                case "Basic Industries":
                    return Sector.BasicIndustries;
                case "Capital Goods":
                    return Sector.CapitalGoods;
                case "Consumer Durables":
                    return Sector.ConsumerDurables;
                case "Consumer Non-Durables":
                    return Sector.ConsumerNonDurables;
                case "Consumer Services":
                    return Sector.ConsumerServices;
                case "Energy":
                    return Sector.Energy;
                case "Finance":
                    return Sector.Finance;
                case "Health Care":
                    return Sector.HealthCare;
                case "Miscellaneous":
                    return Sector.Miscellaneous;
                case "Public Utilities":
                    return Sector.PublicUtilities;
                case "Sector":
                    return Sector.Sector;
                case "Technology":
                    return Sector.Technology;
                case "Transportation":
                    return Sector.Transportation;
            }
            throw new Exception("Cannot unmarshal type Sector");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Sector)untypedValue;
            switch (value)
            {
                case Sector.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Sector.BasicIndustries:
                    serializer.Serialize(writer, "Basic Industries");
                    return;
                case Sector.CapitalGoods:
                    serializer.Serialize(writer, "Capital Goods");
                    return;
                case Sector.ConsumerDurables:
                    serializer.Serialize(writer, "Consumer Durables");
                    return;
                case Sector.ConsumerNonDurables:
                    serializer.Serialize(writer, "Consumer Non-Durables");
                    return;
                case Sector.ConsumerServices:
                    serializer.Serialize(writer, "Consumer Services");
                    return;
                case Sector.Energy:
                    serializer.Serialize(writer, "Energy");
                    return;
                case Sector.Finance:
                    serializer.Serialize(writer, "Finance");
                    return;
                case Sector.HealthCare:
                    serializer.Serialize(writer, "Health Care");
                    return;
                case Sector.Miscellaneous:
                    serializer.Serialize(writer, "Miscellaneous");
                    return;
                case Sector.PublicUtilities:
                    serializer.Serialize(writer, "Public Utilities");
                    return;
                case Sector.Sector:
                    serializer.Serialize(writer, "Sector");
                    return;
                case Sector.Technology:
                    serializer.Serialize(writer, "Technology");
                    return;
                case Sector.Transportation:
                    serializer.Serialize(writer, "Transportation");
                    return;
            }
            throw new Exception("Cannot marshal type Sector");
        }

        public static readonly SectorConverter Singleton = new SectorConverter();
    }
}
